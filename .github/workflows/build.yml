name: Build and Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  release:
    runs-on: ${{ matrix.os }}
    permissions: 
      contents: write
      packages: write
    
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
    
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
        
      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install
      
      # Configurar assinatura de código para macOS
      - name: Prepare for app notarization (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          mkdir -p ~/private_keys/
          echo '${{ secrets.api_key }}' > ~/private_keys/AuthKey_${{ secrets.api_key_id }}.p8 || true
      
      # Build Electron app
      - name: Build Electron app
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            pnpm run dist:win
          elif [ "$RUNNER_OS" == "macOS" ]; then
            pnpm run dist:mac
          else
            pnpm run dist:linux
          fi
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Lista arquivos na pasta dist para depuração
      - name: List files in dist
        run: |
          ls -la dist/
        shell: bash
          
      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.os }}-artifacts
          path: |
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          
      # Attach assets to GitHub Release para todas as plataformas
      - name: Attach assets to GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            dist/*.exe
            dist/*.msi
            dist/*.dmg
            dist/*.zip
            dist/*.AppImage
            dist/*.deb
            dist/*.rpm
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
      
      # Build CLI package
      - name: Build CLI package
        if: matrix.os == 'windows-latest'
        run: pnpm run cli:build 